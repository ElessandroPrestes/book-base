services:
  book_app1:
    image: elessandrodev/php-core:v1.0.1
    container_name: book_app1
    working_dir: /var/www/
    restart: unless-stopped
    command: php-fpm
    volumes:
      - app_src:/var/www
    expose:
      - 9000
    depends_on:
      book_mysql:
        condition: service_healthy
      book_redis:
        condition: service_healthy
    networks:
      - api_network

  book_app2:
    image: elessandrodev/php-core:v1.0.1
    container_name: book_app2
    working_dir: /var/www/
    restart: unless-stopped
    command: php-fpm
    volumes:
      - app_src:/var/www
    expose:
      - 9000
    depends_on:
      book_mysql:
        condition: service_healthy
      book_redis:
        condition: service_healthy
    networks:
      - api_network

  book_horizon:
    image: elessandrodev/php-core:v1.0.1
    container_name: book_horizon
    working_dir: /var/www/
    restart: unless-stopped
    command: >
      sh -c "composer install && php artisan horizon"
    volumes:
      - app_src:/var/www
    depends_on:
      book_redis:
        condition: service_healthy
    networks:
      - api_network

  book_scheduler:
    image: elessandrodev/php-core:v1.0.1
    container_name: book_scheduler
    working_dir: /var/www/
    restart: unless-stopped
    command: >
      sh -c "composer install && while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"
    volumes:
      - app_src:/var/www
    depends_on:
      book_mysql:
        condition: service_healthy
      book_redis:
        condition: service_healthy
    networks:
      - api_network

  book_nginx:
    image: nginx:1.25-alpine
    container_name: book_nginx
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - app_src:/var/www
      - nginx_conf:/etc/nginx/conf.d
    depends_on:
      - book_app1
      - book_app2
    networks:
      - api_network

  book_mysql:
    image: mysql:8.1
    container_name: book_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
    volumes:
      - ./.docker/mysql_data:/var/lib/mysql
    ports:
      - "${DB_PORT}:3306"
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -p${DB_ROOT_PASSWORD} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10


  book_redis:
    image: redis:7.2.4-alpine
    container_name: book_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  book_adminer:
    image: adminer:4.8.1
    container_name: book_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - book_mysql
    networks:
      - api_network
  
  book_sonarqube:
    image: sonarqube:community
    container_name: book_sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000" 
      - "9092:9092"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true 
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - api_network

networks:
  api_network:
    driver: bridge

volumes:
  app_src:
  nginx_conf:
  mysql_data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
